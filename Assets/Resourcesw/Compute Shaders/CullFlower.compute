// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture

struct InstanceData{
    float3 pos;
    float4x4 trs;
    float texIndex;  
};

RWStructuredBuffer<InstanceData> instanceBuffer;
AppendStructuredBuffer<InstanceData> renderBuffer;

float culledDist;
float3 camPos;
float4x4 vp;

[numthreads(64,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 pos = float4(instanceBuffer[id.x].pos, 1);
    
    float4 viewspace = mul(vp, pos);
    float4 clipspace = viewspace;
    
    float x = clipspace.x;
    float y = clipspace.y;
    float z = clipspace.z;
    float w = clipspace.w + 0.3;
    
    bool inView = !(x < -w || x > w|| y < -w || y > w || z < -w || z > w);
    float dist = length(camPos - pos.xyz);
    bool withinDist = dist < culledDist;
    
    if(inView && withinDist) renderBuffer.Append(instanceBuffer[id.x]);
    
}
